// Generated by CoffeeScript 1.7.1
(function() {
  var castArray, castObject, castObjectIds, castString, mongoose, routeCast;

  mongoose = require("mongoose");

  exports.toCollectionName = require("mongoose/lib/utils").toCollectionName;

  routeCast = function(item) {};

  castArray = function(array) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (Array.isArray(item)) {
        _results.push(castArray(item));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  castObject = function(obj) {};

  castString = function(str) {};

  exports.castObjectIds = castObjectIds = function(object) {
    var err, key, _results;
    _results = [];
    for (key in object) {
      if (key === "_bsontype") {
        continue;
      }
      if (typeof object[key] === "object" && !Array.isArray(object[key])) {
        _results.push(castObjectIds(object[key]));
      } else if (key.search("_") === 0) {
        if (typeof object[key] === "string") {
          try {
            _results.push(object[key] = mongoose.Types.ObjectId(object[key]));
          } catch (_error) {
            err = _error;
            _results.push(console.warn("Error converting to object id for fixture generation; check that string maps correctly to an object_id, for key", key, "in", object._id));
          }
        } else if (Array.isArray(object[key])) {
          _results.push(object[key].forEach(function(item) {
            try {
              if (!(item instanceof mongoose.Types.ObjectId)) {
                return object[key][object[key].indexOf(item)] = mongoose.Types.ObjectId(item);
              }
            } catch (_error) {
              err = _error;
              return console.warn("Error converting to object id for fixture generation; check that string maps correctly to an object_id, for key", key, "in", object._id);
            }
          }));
        } else {
          _results.push(void 0);
        }
      } else if (Array.isArray(object[key])) {
        _results.push(object[key].forEach(function(item) {
          if (typeof item === "object" || typeof item === "array") {
            return castObjectIds(item);
          }
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
