// Generated by CoffeeScript 1.7.1
(function() {
  var Revert, async;

  async = require("async");

  Revert = function(collections, documents) {
    this.collections = collections;
    this.documents = documents;
    return this;
  };

  Revert.prototype.restoreCollection = function(collection, done) {
    var docs;
    docs = this.collections[collection.name];
    return collection.secureChannel.remove({}, function(err) {
      return collection.secureChannel.insert(docs, done);
    });
  };

  Revert.prototype.unremoveDocById = function(id, collection, done) {
    var doc;
    doc = this.documents[collection.name][String(id)];
    return collection.secureChannel.insert(doc, done);
  };

  Revert.prototype.uninsertDocById = function(id, collection, done) {
    return collection.secureChannel.remove({
      _id: id
    }, done);
  };

  Revert.prototype.unupdateDocById = function(id, collection, done) {
    var doc;
    doc = this.documents[collection.name][String(id)];
    return collection.secureChannel.update({
      _id: id
    }, doc, done);
  };

  Revert.prototype.insert = function(id, collection, opts, done) {
    return this.uninsertDocById(id, collection, done);
  };

  Revert.prototype.remove = function(id, collection, opts, done) {
    return this.unremoveDocById(id, collection, done);
  };

  Revert.prototype.update = function(id, collection, opts, done) {
    return this.unupdateDocById(id, collection, done);
  };

  Revert.prototype.findAndModify = function(id, collection, opts, done) {
    if (opts.remove) {
      return this.unremoveDocById(id, collection, done);
    } else {
      return this.unupdateDocById(id, collection, done);
    }
  };

  Revert.prototype.revertTransaction = function(method, dataitem, done) {
    var collection, findparams, ids, opts, _ref;
    collection = dataitem.collection;
    findparams = dataitem.args["0"];
    ids = null;
    ids = (findparams != null ? (_ref = findparams._id) != null ? _ref['$in'] : void 0 : void 0) != null ? findparams._id['$in'] : [findparams._id];
    opts = method === 'findAndModify' ? {
      remove: dataitem.args["3"].remove
    } : {};
    return async.eachSeries(ids, (function(_this) {
      return function(id, nextId) {
        return _this[method](id, collection, opts, nextId);
      };
    })(this), done);
  };

  Revert.prototype.handle = function(method, dataitem, done) {
    var collection, findparams;
    collection = dataitem.collection;
    findparams = dataitem.args["0"];
    if ((findparams != null ? findparams._id : void 0) != null) {
      return this.revertTransaction(method, dataitem, done);
    } else {
      return this.restoreCollection(collection, done);
    }
  };

  module.exports = Revert;

}).call(this);
