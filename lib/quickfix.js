// Generated by CoffeeScript 1.7.1
(function() {
  var Quickfix, Revert, async, fs, path, util;

  async = require('async');

  fs = require('fs');

  path = require('path');

  util = require('./util');

  Revert = require("./revert");

  Quickfix = function() {
    this.connections = [];
    this.collections = {};
    this.documents = {};
    this._fixtures = [];
    this._datacenter = [];
    this._location = null;
    this._superDirty = true;
    this.revert = new Revert(this.collections, this.documents);
    return this;
  };

  Quickfix.prototype.wiretap = function(collection) {
    var methods;
    if (collection.secureChannel != null) {
      return;
    }
    collection.unmodifiedMethods = {};
    collection.secureChannel = {};
    methods = ["insert", "update", "remove", "findAndModify"];
    return methods.forEach((function(_this) {
      return function(m) {
        collection.unmodifiedMethods[m] = collection[m];
        collection.secureChannel[m] = collection[m].bind(collection);
        return collection[m] = function() {
          var dataitem;
          dataitem = {
            method: m,
            args: arguments,
            collection: collection
          };
          _this._datacenter.push(dataitem);
          return collection.unmodifiedMethods[m].apply(collection, arguments);
        };
      };
    })(this));
  };

  Quickfix.prototype.loadFixturesIntoMemory = function(force) {
    if (force == null) {
      force = false;
    }
    if (force || Object.keys(this.collections).length === 0) {
      this._superDirty = true;
      this._fixtures.forEach((function(_this) {
        return function(f) {
          f.data = require(_this._location + "/" + f.filename);
          f.data.forEach(function(fixtureDocument) {
            return util.castObjectIds(fixtureDocument);
          });
          if (_this.collections[f.collection] == null) {
            _this.collections[f.collection] = [];
          }
          return _this.collections[f.collection] = _this.collections[f.collection].concat(f.data);
        };
      })(this));
      return Object.keys(this.collections).forEach((function(_this) {
        return function(collectionName) {
          _this.documents[collectionName] = {};
          return _this.collections[collectionName].forEach(function(row) {
            return _this.documents[collectionName][String(row._id)] = row;
          });
        };
      })(this));
    }
  };

  Quickfix.prototype.findFixtures = function(absFixturePath, extension) {
    var files;
    if (this._fixtures.length > 0) {
      return this._fixtures;
    }
    absFixturePath = path.normalize(absFixturePath);
    console.log("Quickfix - Searching for fixtures in " + absFixturePath);
    this._location = absFixturePath;
    files = fs.readdirSync(this._location);
    files = files.filter(function(filename) {
      return filename.substr(-extension.length) === extension;
    });
    files.forEach((function(_this) {
      return function(file) {
        var collection;
        collection = file.split('.')[0];
        return _this._fixtures.push({
          filename: file,
          collection: util.toCollectionName(collection)
        });
      };
    })(this));
    return this._fixtures;
  };

  Quickfix.prototype.setupConnection = function(connection, load) {
    if (load == null) {
      load = true;
    }
    this.connections.push({
      connection: connection,
      loadFixtures: !!load
    });
    return this.connections;
  };

  Quickfix.prototype.resetConnections = function() {
    return this.connections = [];
  };

  Quickfix.prototype.ensureConnectionsReady = function(done) {
    return async.each(this.connections, function(conn, next) {
      if (conn.connection.readyState === 1) {
        return next();
      } else {
        conn.connection.on("open", function() {
          return next();
        });
        return conn.connection.on("error", function() {
          return next("err");
        });
      }
    }, function() {
      return done();
    });
  };

  Quickfix.prototype.ensureCollectionsExistInConnection = function(done) {
    var collectionNames;
    collectionNames = Object.keys(this.collections);
    return async.each(this.connections, (function(_this) {
      return function(conn, nextConn) {
        return async.each(collectionNames, function(collectionName, nextCollection) {
          conn.connection.collection(collectionName);
          return nextCollection();
        }, nextConn);
      };
    })(this), done);
  };

  Quickfix.prototype.insertAllDataIntoDatabase = function(done) {
    var collectionNames;
    collectionNames = Object.keys(this.collections);
    return async.each(this.connections, (function(_this) {
      return function(conn, nextConn) {
        if (conn.loadFixtures === false) {
          return nextConn();
        }
        return async.each(collectionNames, function(collectionName, nextCollection) {
          var collection, data;
          collection = conn.connection.collection(collectionName);
          data = _this.collections[collectionName];
          return collection.secureChannel.insert(data, {
            safe: true
          }, function(err, docs) {
            return nextCollection(err);
          });
        }, nextConn);
      };
    })(this), (function(_this) {
      return function(err) {
        _this._superDirty = false;
        return done();
      };
    })(this));
  };

  Quickfix.prototype.destroyAllDataFromDatabase = function(done) {
    var collectionNames;
    collectionNames = Object.keys(this.collections);
    this._superDirty = true;
    return async.each(this.connections, (function(_this) {
      return function(conn, nextConn) {
        return async.each(collectionNames, function(collectionName, nextCollection) {
          var collection;
          collection = conn.connection.collection(collectionName);
          return collection.secureChannel.remove({}, {
            safe: true
          }, function(err, docs) {
            if ((err != null ? err.code : void 0) === 10101) {
              return collection.drop(function(err) {
                if ((err != null ? err.message : void 0) === 'ns not found') {
                  return nextCollection();
                } else {
                  return nextCollection(err);
                }
              });
            } else {
              return nextCollection(err);
            }
          });
        }, nextConn);
      };
    })(this), done);
  };

  Quickfix.prototype.commenceMassSurveillance = function(done) {
    return async.each(this.connections, (function(_this) {
      return function(conn, nextConn) {
        return async.each(Object.keys(conn.connection.collections), function(collectionName, nextCollection) {
          _this.wiretap(conn.connection.collection(collectionName));
          return nextCollection();
        }, nextConn);
      };
    })(this), done);
  };

  Quickfix.prototype.ready = function(done) {
    return async.series([
      (function(_this) {
        return function(next) {
          return _this.ensureConnectionsReady(next);
        };
      })(this), (function(_this) {
        return function(next) {
          _this.loadFixturesIntoMemory();
          return next();
        };
      })(this), (function(_this) {
        return function(next) {
          return _this.ensureCollectionsExistInConnection(next);
        };
      })(this), (function(_this) {
        return function(next) {
          return _this.commenceMassSurveillance(next);
        };
      })(this)
    ], done);
  };

  Quickfix.prototype.destroyDatacenter = function(done) {
    while (this._datacenter.length > 0) {
      this._datacenter.pop();
    }
    return done();
  };

  Quickfix.prototype.selectivelyRestoreDatabase = function(done) {
    return async.whilst((function(_this) {
      return function() {
        return _this._datacenter.length > 0;
      };
    })(this), (function(_this) {
      return function(next) {
        var dataitem;
        dataitem = _this._datacenter.pop();
        return _this.revert.handle(dataitem.method, dataitem, next);
      };
    })(this), done);
  };

  Quickfix.prototype.populate = function(done) {
    if (this._superDirty) {
      return async.series([
        (function(_this) {
          return function(next) {
            return _this.destroyAllDataFromDatabase(next);
          };
        })(this), (function(_this) {
          return function(next) {
            return _this.insertAllDataIntoDatabase(next);
          };
        })(this), (function(_this) {
          return function(next) {
            return _this.destroyDatacenter(next);
          };
        })(this)
      ], done);
    } else if (this._datacenter.length > 0) {
      return async.series([
        (function(_this) {
          return function(next) {
            return _this.selectivelyRestoreDatabase(next);
          };
        })(this)
      ], done);
    } else {
      return done();
    }
  };

  Quickfix.prototype.initModels = function(done) {
    return this.ready(done);
  };

  Quickfix.prototype.use = function(ignore) {};

  module.exports = new Quickfix;

}).call(this);
